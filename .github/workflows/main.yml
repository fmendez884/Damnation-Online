name: GameCI Template ðŸŽ®

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - staging

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  setup-and-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Setup
      run: echo "Setup step goes here"

    - name: Run Tests
      run: echo "Test step goes here"

  build:
    needs: setup-and-tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ['WebGL', 'Server']
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-${{ matrix.target }}
          restore-keys: |
            Library-build-
            Library-

      - uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: '2021.3.4f1'
          targetPlatform: ${{ matrix.target == 'Server' && 'StandaloneLinux64' || 'WebGL' }}
          buildName: ${{ matrix.target }}
          buildMethod: ${{ matrix.target == 'Server' && 'BuildScript.BuildLinuxServer' || '' }}
          buildsPath: Builds/${{ matrix.target }}
      
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: Builds/${{ matrix.target == 'Server' && 'Server' || 'WebGL'}}
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r deploy-unity/requirements.txt

      - name: Deploy to Staging or Production
        env: 
          BUILD_TYPE: ${{ matrix.target == 'Server' && 'linux' || 'webgl' }}
          AWS_STAGE_USER: ${{ secrets.AWS_STAGE_USER }}
          AWS_STAGE_IP: ${{ secrets.AWS_STAGE_IP }}
          AWS_STAGE_SSH_KEYPAIR: ${{ secrets.AWS_STAGE_SSH_KEYPAIR }}
          AWS_PROD_USER: ${{ secrets.AWS_PROD_USER }}
          AWS_PROD_IP: ${{ secrets.AWS_PROD_IP }}
          AWS_PROD_SSH_KEYPAIR: ${{ secrets.AWS_PROD_SSH_KEYPAIR }}
          WEBGL_BUILD_PATH: ${{ matrix.target == 'Server' && '' || 'Builds/WebGL' }}
          LINUX_BUILD_PATH: ${{ matrix.target == 'Server' && 'Builds/Server' || '' }}
          ACCESS_TOKEN_GITHUB: ${{ secrets.ACCESS_TOKEN_GITHUB }}
          WEBAPP_REPO_GITHUB: ${{ secrets.WEBAPP_REPO_GITHUB }}
        run: python deploy-unity/project.py